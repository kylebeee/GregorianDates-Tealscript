#pragma version 10

// This TEAL was generated by TEALScript v0.92.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// toDate(uint64)(uint64,uint64,uint64)
*abi_route_toDate:
	// The ABI return prefix
	byte 0x151f7c75

	// ts: uint64
	txna ApplicationArgs 1
	btoi

	// execute toDate(uint64)(uint64,uint64,uint64)
	callsub toDate
	concat
	log
	int 1
	return

// toDate(ts: uint64): GregorianDateObject
toDate:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 8

	// contracts/GregorianDates.algo.ts:13
	// z = ts / 86400
	frame_dig -1 // ts: uint64
	int 86400
	/
	frame_bury 0 // z: uint64

	// contracts/GregorianDates.algo.ts:15
	// z += 719468
	frame_dig 0 // z: uint64
	int 719468
	+
	frame_bury 0 // z: uint64

	// contracts/GregorianDates.algo.ts:16
	// era = z / 146097
	frame_dig 0 // z: uint64
	int 146097
	/
	frame_bury 1 // era: uint64

	// contracts/GregorianDates.algo.ts:17
	// doe = z - era * 146097
	frame_dig 0 // z: uint64
	frame_dig 1 // era: uint64
	int 146097
	*
	-
	frame_bury 2 // doe: uint64

	// contracts/GregorianDates.algo.ts:18
	// yoe = (doe - doe / 1460 + doe / 36524 - doe / 146096) / 365
	frame_dig 2 // doe: uint64
	frame_dig 2 // doe: uint64
	int 1460
	/
	-
	frame_dig 2 // doe: uint64
	int 36524
	/
	+
	frame_dig 2 // doe: uint64
	int 146096
	/
	-
	int 365
	/
	frame_bury 3 // yoe: uint64

	// contracts/GregorianDates.algo.ts:19
	// y = yoe + era * 400
	frame_dig 3 // yoe: uint64
	frame_dig 1 // era: uint64
	int 400
	*
	+
	frame_bury 4 // y: uint64

	// contracts/GregorianDates.algo.ts:20
	// doy = doe - (365 * yoe + yoe / 4 - yoe / 100)
	frame_dig 2 // doe: uint64
	int 365
	frame_dig 3 // yoe: uint64
	*
	frame_dig 3 // yoe: uint64
	int 4
	/
	+
	frame_dig 3 // yoe: uint64
	int 100
	/
	-
	-
	frame_bury 5 // doy: uint64

	// contracts/GregorianDates.algo.ts:21
	// mp = (5 * doy + 2) / 153
	int 5
	frame_dig 5 // doy: uint64
	*
	int 2
	+
	int 153
	/
	frame_bury 6 // mp: uint64

	// contracts/GregorianDates.algo.ts:22
	// d = doy - (153 * mp + 2) / 5 + 1
	frame_dig 5 // doy: uint64
	int 153
	frame_dig 6 // mp: uint64
	*
	int 2
	+
	int 5
	/
	-
	int 1
	+
	frame_bury 7 // d: uint64

	// contracts/GregorianDates.algo.ts:23
	// m = mp < 10 ? mp + 3 : mp - 9
	frame_dig 6 // mp: uint64
	int 10
	<
	bz *ternary1_false
	frame_dig 6 // mp: uint64
	int 3
	+
	b *ternary1_end

*ternary1_false:
	frame_dig 6 // mp: uint64
	int 9
	-

*ternary1_end:
	frame_bury 8 // m: uint64

	// contracts/GregorianDates.algo.ts:24
	// y = y + (m <= 2 ? 1 : 0)
	frame_dig 4 // y: uint64
	frame_dig 8 // m: uint64
	int 2
	<=
	bz *ternary3_false
	int 1
	b *ternary3_end

*ternary3_false:
	int 0

*ternary3_end:
	+
	frame_bury 4 // y: uint64

	// contracts/GregorianDates.algo.ts:26
	// return {
	//       year: y,
	//       month: m,
	//       day: d
	//     }
	frame_dig 4 // y: uint64
	itob
	frame_dig 8 // m: uint64
	itob
	concat
	frame_dig 7 // d: uint64
	itob
	concat

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 8
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "toDate(uint64)(uint64,uint64,uint64)"
	txna ApplicationArgs 0
	match *abi_route_toDate

	// this contract does not implement the given ABI method for call NoOp
	err